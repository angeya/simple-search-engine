package top.angeya.crawler;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import lombok.extern.slf4j.Slf4j;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import org.springframework.http.HttpMethod;import org.springframework.http.ResponseEntity;import org.springframework.web.client.RestTemplate;import top.angeya.constant.HtmlConstant;import top.angeya.crawler.handler.Handler;import top.angeya.crawler.scheduler.UrlScheduler;import top.angeya.pojo.entity.UrlInfo;import top.angeya.pojo.web.HtmlPage;import top.angeya.threads.CommonThreadPool;import top.angeya.util.Tools;import java.net.URL;import java.util.ArrayList;import java.util.List;/** * 爬虫 * @Author: angeya * @Date: 2023/12/28 14:51 * @Description: */@Slf4jpublic class Crawler {    private List<String> urlList = new ArrayList<>();    private UrlScheduler urlScheduler = null;    private Handler handler = null;    /**     * 线程数量     */    private int threadNum = 1;    public static Crawler create() {        return new Crawler();    }    public Crawler addUrlList(List<String> urlList) {        this.urlList = urlList;        return this;    }    public Crawler threads(int threadNum) {        this.threadNum = threadNum;        return this;    }    public Crawler setSchedule(UrlScheduler urlScheduler) {        this.urlScheduler = urlScheduler;        return this;    }    public Crawler addPipeline(Handler handler) {        this.handler = handler;        return this;    }    /**     * 启动爬虫 开始工作     */    public void start() {        this.urlScheduler.push(this.urlList);        Runnable task = () -> {            while (true) {                UrlInfo urlInfo = this.urlScheduler.pop();                String urlText = urlInfo.getUrl();                try {                    String html = requestWeb(urlText);                    if (html == null) {                        continue;                    }                    HtmlPage htmlPage = this.parseWeb(html, urlText);                    log.info("download web [{} - {}] success", urlInfo, htmlPage.getTitle());                    this.handler.process(htmlPage);                    this.urlScheduler.push(htmlPage.getLinkList());                    Tools.requestSleep();                } catch (InterruptedException e) {                    Thread.currentThread().interrupt();                    log.error("sleep exception", e);                } catch (Exception e) {                    log.error("processing url [{}] error", urlText, e);                }            }        };        for (int i = 0; i < this.threadNum; i++) {            CommonThreadPool.EXECUTOR_SERVICE.execute(task);        }    }    /**     * 请求网页     * @param url url     * @return html内容     */    private String requestWeb(String url) {        try {            new URL(url);        } catch (Exception e) {            log.warn("is not a valid url {}, skip it", url);            return null;        }        // 创建RestTemplate实例        RestTemplate restTemplate = new RestTemplate();        // 发送GET请求并获取响应        ResponseEntity<String> response = null;        try {            response = restTemplate.exchange(url, HttpMethod.GET, null, String.class);        } catch (Exception e) {            log.warn("request url {} failed, skip it", url);            return null;        }        // 获取响应体        return response.getBody();    }    private HtmlPage parseWeb(String html, String url) {        if (StringUtils.isEmpty(html)) {            // 跳过        }        Document document = Jsoup.parse(html);        String title = this.getTitle(document);        List<String> linkList = this.getLinkList(document);        HtmlPage htmlPage = new HtmlPage();        htmlPage.setTitle(title);        htmlPage.setUrl(url);        htmlPage.setRawHtml(html);        htmlPage.setLinkList(linkList);        htmlPage.setText(document.text());        return htmlPage;    }    private List<String> getLinkList(Document document) {        Elements elements = document.getAllElements();        List<String> linkList = new ArrayList<>();        for (Element element : elements) {            if (element.hasAttr(HtmlConstant.ATTR_HREF)) {                linkList.add(element.attr(HtmlConstant.ATTR_HREF));            }        }        return linkList;    }    private String getTitle(Document document) {        Elements titles = document.getElementsByTag(HtmlConstant.TAG_TITLE);        if (titles.isEmpty()) {            return "";        }        return titles.get(0).text();    }}